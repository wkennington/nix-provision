#!/bin/sh

service_restart () {
  if echo "$ISSUE" | grep -q 'Ubuntu 14.04'; then
    service "$1" restart
  elif echo "$ISSUE" | grep -q 'Debian GNU/Linux 9'; then
    systemctl restart "$1"
  else
    echo "Unsupported Service Manager" >&2
    exit 1
  fi
}

service_start () {
  if echo "$ISSUE" | grep -q 'Ubuntu 14.04'; then
    service "$1" start
  elif echo "$ISSUE" | grep -q 'Debian GNU/Linux 9'; then
    systemctl start "$1"
  else
    echo "Unsupported Service Manager" >&2
    exit 1
  fi
}

service_stop () {
  if echo "$ISSUE" | grep -q 'Ubuntu 14.04'; then
    service "$1" stop
  elif echo "$ISSUE" | grep -q 'Debian GNU/Linux 9'; then
    systemctl stop "$1"
  else
    echo "Unsupported Service Manager" >&2
    exit 1
  fi
}

http_download () {
  curl -O "$1" && return 0
  wget "$1" && return 0
  echo "Failed to download $1" >&2
  return 1
}

http_get () {
  curl "$1" && return 0
  wget -O- "$1" && return 0
  echo "Failed to get $1" >&2
  return 1
}

write_nix_conf () {
  sed "s,@VCORES@,$VCORES," "$SCRIPTDIR/ref/core/nix.conf.in" > /etc/nix/nix.conf
}

write_profile_script () {
  cp "$SCRIPTDIR/ref/core/nix-profile.sh" /etc/profile.d/nix-profile.sh
}

install_pkg () {
  nix-env -iA nixpkgs.$@
}

# Required Module Functions
core_cleanup_final () {
  return 0
}

core_cleanup_old () {
  service_stop nix-daemon >/dev/null 2>&1 || true
  killall nix-daemon >/dev/null 2>&1 || true
  rm -rf /etc/init/nix-daemon.conf /etc/nix /nix /etc/profile.d/nix-profile.sh
  sed -i '/^nixbld/d' /etc/{passwd,group}
  rm -rf $HOME/{.nix-profile,.nix-channels,.nix-defexpr}
}

core_install () {
  # Make sure nix is not running and not present
  # Download and unpack nix
  echo "Rerieving nix metadata" >&2
  ARCH="$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]')"
  LATEST_TAR="$(http_get 'https://nixos.org/nix/install' | grep '^url=' | sed -e 's,url="\(.*\)",\1,' -e "s,\$system,$ARCH,g")"
  echo "Retrieving nix" >&2
  http_download "$LATEST_TAR"
  tar xf nix-*.tar*
  rm nix-*.tar*

  # Add nix users / groups
  echo "Creating nixbuilders" >&2
  ID="1179000000"
  if grep -q "$ID" /etc/passwd || grep -q "$ID" /etc/group; then
    echo "UID / GID already exists" >&2
    exit 1
  fi
  GROUPSTR="nixbld:x:1179000000:"
  for I in $(seq 1 $(($VCORES * 10))); do
    echo "nixbld$I:x:$(( $I + 1179000000 )):1179000000:" >> /etc/passwd
    GROUPSTR="${GROUPSTR}nixbld${I},"
  done
  GROUPSTR="${GROUPSTR:: -1}"
  echo "$GROUPSTR" >> /etc/group

  # Create nix.conf
  echo "Configuring a basic nix" >&2
  mkdir -p -m 0755 /etc/nix
  write_nix_conf

  # Setup proper ownership
  echo "Creating the nix store" >&2
  mkdir -p /nix/store
  chgrp nixbld /nix/store
  chmod 1775 /nix/store
  mkdir -p -m 1777 /nix/var/nix/{gcroots,profiles}/per-user

  # Install nix
  echo "Installing nix" >&2
  cd nix-*
  export NIX_REMOTE=
  ./install

  # Source the root profile with nix installed
  echo "Source nix" >&2
  . "$SCRIPTDIR/ref/core/nix-profile.sh"

  # Setup the nix daemon
  echo "Installing nix daemon init script" >&2
  if echo "$ISSUE" | grep -q 'Ubuntu 14.04'; then
    cp "$SCRIPTDIR/ref/core/nix-daemon.conf" /etc/init
  elif echo "$ISSUE" | grep -q 'Debian GNU/Linux 9'; then
    cp "$SCRIPTDIR/ref/core/nix-daemon.service" /lib/systemd/system
    systemctl enable nix-daemon
  else
    echo "Unsupported Init System" >&2
    exit 1
  fi

  # Startup the daemon
  echo "Starting the nix daemon" >&2
  service_start nix-daemon

  write_profile_script

  # Remove any obsolete channels
  rm /nix/var/nix/profiles/per-user/root/channels*

  # Make sure we are up to date with the latest channel
  core_update
}

core_update () {
  nix-channel --update || true
  install_pkg pkgs.nix
  write_nix_conf
  service_restart nix-daemon
  write_profile_script
}
